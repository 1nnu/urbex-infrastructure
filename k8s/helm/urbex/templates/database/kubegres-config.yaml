apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ .Values.database.name }}-conf"
  namespace: {{ .Values.application.namespace }}
data:
  primary_init_script.sh: |
    #!/bin/bash
    set -e

    dt=$(date '+%d/%m/%Y %H:%M:%S')
    echo "$dt - Running init script the 1st time Primary PostgreSql container is created..."

    # Environment setup
    export DB_NAME="{{ .Values.database.env.POSTGRES_DB }}"
    export DB_USER="{{ .Values.database.env.POSTGRES_USER }}"
    export DB_PASSWORD="{{ .Values.database.env.POSTGRES_PASSWORD }}"
    export AWS_ACCESS_KEY_ID="{{ .Values.database.backup.aws.access_key }}"
    export AWS_SECRET_ACCESS_KEY="{{ .Values.database.backup.aws.secret_key }}"
    export AWS_DEFAULT_REGION="{{ .Values.database.backup.aws.region }}"
    export AWS_S3_BUCKET="{{ .Values.database.backup.aws.s3_bucket }}"
    export BACKUP_DIR="/tmp/pg-backup"

    mkdir -p "$BACKUP_DIR"
    cd "$BACKUP_DIR"

    echo "$dt - Fetching latest backup from S3..."
    LATEST_BACKUP=$(aws s3 ls "s3://$AWS_S3_BUCKET/backups/" | sort | tail -n 1 | awk '{print $4}')

    if [ -z "$LATEST_BACKUP" ]; then
      echo "$dt - No backup found in S3. Skipping restore."
    else
      echo "$dt - Found backup: $LATEST_BACKUP"
      aws s3 cp "s3://$AWS_S3_BUCKET/backups/$LATEST_BACKUP" "$LATEST_BACKUP"

      echo "$dt - Creating database if it does not exist..."
      psql -U postgres -tc "SELECT 1 FROM pg_database WHERE datname = '$DB_NAME'" | grep -q 1 || \
        psql -U postgres -c "CREATE DATABASE $DB_NAME OWNER $DB_USER;"

      echo "$dt - Restoring backup..."
      gunzip -c "$LATEST_BACKUP" | pg_restore -U "$DB_USER" -d "$DB_NAME" --no-owner --clean

      echo "$dt - Restore complete."
    fi
